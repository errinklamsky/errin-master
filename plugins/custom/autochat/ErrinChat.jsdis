const { OpenAI } = require('openai');
const fs = require('fs');

// Variabel global untuk menyimpan konteks percakapan sebelumnya
let conversationContext = '';
// Variabel global untuk menyimpan waktu mulai sesi percakapan
let conversationStartTime = null;
// Batas waktu maksimum untuk menyimpan konteks percakapan (misalnya, 1000 karakter)
const maxContextLength = 1500;

exports.run = {
  async: async (m, { client, body }) => {
    try {
      // Mengatur waktu mulai percakapan jika belum diatur
      if (!conversationStartTime) {
        conversationStartTime = new Date();
      }

      // Menghitung selisih waktu sejak percakapan dimulai
      const elapsedTime = new Date() - conversationStartTime;

      // Tentukan batas waktu sesi dalam milidetik (misalnya, 30 menit)
      const sessionTimeout = 30 * 60 * 1000; // 30 menit

      // Periksa apakah waktu percakapan telah melebihi batas waktu sesi
      if (elapsedTime > sessionTimeout) {
        // Jika waktu percakapan telah melebihi batas waktu sesi, reset konteks percakapan
        conversationContext = '';
        // Reset waktu mulai sesi
        conversationStartTime = null;
      }

      // Menggunakan regex case-insensitive untuk pencarian kata "arwin"
//      const regex = /arwin/i;
      const regex = /errin/i;
      // ID bot yang spesifik
      const botId = '6283893900755@s.whatsapp.net';

      // Menentukan apakah pesan yang di-quote adalah pesan dari bot
      const isQuotedFromBot = m.quoted ? m.quoted.sender === botId : false;

      // Cek apakah pesan mengandung kata kunci atau pesan yang di-quote berasal dari bot
      if (regex.test(body) || isQuotedFromBot) {
        await client.sendReact(m.chat, 'ðŸ•’', m.key); // Mengirim reaksi

        const openai = new OpenAI({
          apiKey: process.env.OPENAI_API_KEY
        });

        // Membaca isi file prompt
        const promptContent = fs.readFileSync('./media/prompt2.txt', 'utf-8');

        const json = await openai.chat.completions.create({
          messages: [
            {
              'role': 'system',
              'content': promptContent
            },
            {
              'role': 'user',
              'content': body,
            },
            {
              'role': 'assistant',
              'content': conversationContext + body, // Menggunakan konteks percakapan sebelumnya
            },
            {
              'role': 'user',
              'content': body,
            },
            {
              'role': 'assistant',
              'content': conversationContext + body, // Menggunakan konteks percakapan sebelumnya
            },
      
          ],
          model: 'gpt-3.5-turbo',
          temperature: 0.7,
          top_p: 1,
          max_tokens: 600
        });

        // Simpan konteks percakapan terbaru
        conversationContext += body + '\n';

        // Pembersihan konteks percakapan jika panjangnya melebihi batas maksimum
        if (conversationContext.length > maxContextLength) {
          // Potong konteks percakapan sehingga panjangnya tidak melebihi batas maksimum
          conversationContext = conversationContext.slice(conversationContext.length - maxContextLength);
        }

        // Mengirim balasan ke chat
        client.reply(m.chat, json.choices[0].message.content.trim(), m);
      } else {
        // Jika tidak memenuhi kondisi, tidak memberikan respons
        return;
      }
    } catch (e) {
      console.log(e);
      // Anggap Func.jsonFormat adalah fungsi untuk memformat error, pastikan fungsi ini ada atau tangani error sesuai kebutuhan
      client.reply(m.chat, `Terjadi kesalahan: ${e.message}`, m);
    }
  },
  error: false,
  cache: true,
  limit: true,
  group: true,
  location: __filename
};
